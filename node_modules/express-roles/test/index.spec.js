var roles = require('../index')
  , chai = require('chai')
  , expect = chai.expect
  , sinon = require('sinon')
  , sinonChai = require('sinon-chai');
chai.use(sinonChai);

describe('express-roles', function() {
  it('should send HTTP 401 if req.user.roles is undefined', function() {
    var request = { user: { roles: undefined } };
    var result = { sendStatus: sinon.spy() };

    var rolesMiddleware = roles();
    rolesMiddleware(request, result);

    return expect(result.sendStatus).to.have.been.calledWith(401);
  });
  it('should send HTTP 401 if req.users is undefined', function() {
    var request = { user: undefined };
    var result = { sendStatus: sinon.spy() };

    var rolesMiddleware = roles();
    rolesMiddleware(request, result);

    return expect(result.sendStatus).to.have.been.calledWith(401); 
  });
  it('should invoke next handler if req.user.roles contains correct roles', function() {
    var allowedRoles = ['administrator'];
    var request = { user: { roles: allowedRoles } };
    var callback = sinon.spy();

    var rolesMiddleware = roles(allowedRoles);
    rolesMiddleware(request, {}, callback);

    return expect(callback).to.have.been.called; 
  });
  it('should accept rest arguments', function() {
    var allowedRoles = ['foo', 'bar', 'qux'];
    var request = { user: { roles: allowedRoles } };
    var callback = sinon.spy();

    var rolesMiddleware = roles(allowedRoles[0], allowedRoles[1], allowedRoles[2]);
    rolesMiddleware(request, {}, callback);

    return expect(callback).to.have.been.called; 
  });
  it('should send HTTP 401 if user does not have all roles', function() {
    var request = { user: { roles: [] } };
    var result = { sendStatus: sinon.spy() };

    var rolesMiddleware = roles(['foo']);
    rolesMiddleware(request, result);

    return expect(result.sendStatus).to.have.been.calledWith(401);   
  });
  it('should call next handler if req.user.roles contains no roles and user has no roles', function() {
    var request = { user: { roles: [] } };
    var callback = sinon.spy();

    var rolesMiddleware = roles();
    rolesMiddleware(request, {}, callback);

    return expect(callback).to.have.been.called; 
  });
  it('should call next handler if req.user.roles contains all roles and has more', function() {
    var request = { user: { roles: ['foo', 'bar', 'qux'] } };
    var callback = sinon.spy();

    var rolesMiddleware = roles('foo');
    rolesMiddleware(request, {}, callback);

    return expect(callback).to.have.been.called; 
  });
});